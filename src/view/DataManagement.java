package view;

import controller.DeleteData;
import controller.FetchFromApi;
import controller.SaveData;
import java.awt.Cursor;
import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import model.Draw;
import model.Prize;
import service.DB;
import service.DateParser;
import service.DateRange;
import service.Utils;

public class DataManagement extends javax.swing.JPanel {
    private final FetchFromApi fetch = new FetchFromApi();
    private SwingWorker<Integer, Integer> worker;
    private int lastDrawId;
    private DateRange dateRange;

    /**
     * Creates new form DataManagement
     */
    public DataManagement() {
        initComponents();
        
        drawsTablePanel.setVisible(false);
        buttonsPanel.setVisible(false);
        progressBar.setVisible(false);
        
        produceDates();
        produceComboBoxValues();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        choiseGroup = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        drawsTablePanel = new javax.swing.JScrollPane();
        drawsTable = new javax.swing.JTable();
        buttonsPanel = new javax.swing.JPanel();
        saveBtn = new javax.swing.JButton();
        deleteDrawsBtn = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        searchBtn = new javax.swing.JButton();
        drawIdField = new javax.swing.JTextField();
        drawIdCombo = new javax.swing.JComboBox<>();
        dateToField = new javax.swing.JFormattedTextField();
        dateFromField = new javax.swing.JFormattedTextField();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton1 = new javax.swing.JRadioButton();
        jPanel5 = new javax.swing.JPanel();
        progressBar = new javax.swing.JProgressBar();

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        drawsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Κλήρωση", "Ημερομηνία", "Νούμερα", "5+1", "5", "4+1", "4", "3+1", "3", "2+1", "1+1"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.String.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        drawsTablePanel.setViewportView(drawsTable);

        buttonsPanel.setOpaque(false);

        saveBtn.setText("Καταχώρηση");
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });
        buttonsPanel.add(saveBtn);

        deleteDrawsBtn.setText("Διαγραφή");
        deleteDrawsBtn.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteDrawsBtnMouseClicked(evt);
            }
        });
        buttonsPanel.add(deleteDrawsBtn);

        jPanel3.setOpaque(false);

        jPanel4.setOpaque(false);

        jPanel2.setOpaque(false);

        searchBtn.setText("Αναζήτηση");
        searchBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        searchBtn.setPreferredSize(new java.awt.Dimension(150, 31));
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });
        jPanel2.add(searchBtn);

        drawIdField.setText("0");

        drawIdCombo.setFont(new java.awt.Font("DejaVu Serif", 1, 14)); // NOI18N
        drawIdCombo.setEnabled(false);
        drawIdCombo.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                drawIdComboItemStateChanged(evt);
            }
        });

        dateToField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("yyyy-MM-dd"))));
        dateToField.setToolTipText("YYYY-MM-dd");

        dateFromField.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter(new java.text.SimpleDateFormat("yyyy-MM-dd"))));
        dateFromField.setToolTipText("YYYY-MM-dd");

        jRadioButton2.setBackground(new java.awt.Color(255, 255, 255));
        choiseGroup.add(jRadioButton2);
        jRadioButton2.setFont(new java.awt.Font("DejaVu Serif", 1, 14)); // NOI18N
        jRadioButton2.setForeground(new java.awt.Color(0, 0, 0));
        jRadioButton2.setText("Ημερομηνίες");
        jRadioButton2.setActionCommand("multiple");

        jRadioButton1.setBackground(new java.awt.Color(255, 255, 255));
        choiseGroup.add(jRadioButton1);
        jRadioButton1.setFont(new java.awt.Font("DejaVu Serif", 1, 14)); // NOI18N
        jRadioButton1.setForeground(new java.awt.Color(0, 0, 0));
        jRadioButton1.setSelected(true);
        jRadioButton1.setText("Κωδικός κλήρωσης");
        jRadioButton1.setActionCommand("single");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jRadioButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 199, Short.MAX_VALUE)
                            .addComponent(jRadioButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(drawIdField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dateFromField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(drawIdCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dateToField, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jRadioButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(drawIdField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(drawIdCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(28, 28, 28)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jRadioButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(dateFromField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(dateToField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jPanel3.add(jPanel4);

        jPanel5.setOpaque(false);
        jPanel5.add(progressBar);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 804, Short.MAX_VALUE)
            .addComponent(drawsTablePanel, javax.swing.GroupLayout.Alignment.TRAILING)
            .addComponent(buttonsPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(drawsTablePanel, javax.swing.GroupLayout.DEFAULT_SIZE, 520, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonsPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    
    // Γεμίζει τα text fields των ημερομηνιών με την σημερινή ημερομηνία και την
    // αντίστοιχη 3 μήνες πριν
    private void produceDates() {
        dateToField.setText(Utils.getTodayDate());
        dateFromField.setText(Utils.getThreeMonthsAgoDate());
    }
    
    // Θέτει το μέγεθος και το κεντράρισμα των columns του table
    private void adjustTableColumns(JTable table) {
        TableColumnModel tcm = table.getColumnModel();
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(JLabel.CENTER);
        
        // Κεντράρισμα των columns
        for (int i=0;i<=10;i++) {
            tcm.getColumn(i).setCellRenderer(centerRenderer);
        }
        
        // Σετάρισμα του μεγέθους κάθε column
        tcm.getColumn(0).setPreferredWidth(25);
        tcm.getColumn(1).setPreferredWidth(45);
        tcm.getColumn(2).setPreferredWidth(90);
        tcm.getColumn(3).setPreferredWidth(40);
        tcm.getColumn(4).setPreferredWidth(30);
        tcm.getColumn(5).setPreferredWidth(30);
        tcm.getColumn(6).setPreferredWidth(30);
        tcm.getColumn(7).setPreferredWidth(30);
        tcm.getColumn(8).setPreferredWidth(30);
        tcm.getColumn(9).setPreferredWidth(30);
        tcm.getColumn(10).setPreferredWidth(30);
    }
    
    // Γεμίζει τον πίνακα με τα δεδομένα των κληρώσεων
    public void loadTableWithData(ArrayList<Draw> draws) {
        DefaultTableModel model = (DefaultTableModel) drawsTable.getModel();
        model.setRowCount(0);

        // Διαβάζει τις draw
        for (Draw draw : draws) {
            ArrayList<String> dividents = new ArrayList<>();
            
            // Διαβάζει τις κατηγορίες κερδών
            for (Prize prize : draw.getPrizeCollection()) {
                dividents.add(prize.getWinners() + " (" + prize.getProfit() + ")");
            }
            
            // Προσθέτει τα περιεχόμενα μια γραμμής στον πίνακα
            Object[] row = {
                draw.getId(), 
                draw.getFormatedDrawDate(), 
                draw.getNumbersInString(), 
                dividents.get(0),
                dividents.get(1),
                dividents.get(2),
                dividents.get(3),
                dividents.get(4),
                dividents.get(5),
                dividents.get(6),
                dividents.get(7)                
            };
            model.addRow(row);
        }
        
        // Ρυθμίζει την εμφάνιση των στηλών
        adjustTableColumns(drawsTable);
        
        drawsTablePanel.setVisible(true);
        buttonsPanel.setVisible(true);
    }
        
    // Διαβάζει τα δεδομένα από το API για να τα εμφανίσει
    private void fetchDrawsData(String choise) {
        // Δημιουργεί Swing Worker για να τρέξει την άντληση των δεδομένων σε thread
        worker = new SwingWorker<Integer, Integer>() {
            // Γίνεται η άντληση των δεδομένων
            @Override
            protected Integer doInBackground() throws Exception {
                // Παιρνάει την μέθοδο publish στο αντικείμενο fetch
                // για να μπορέσει να το χρησιμοποιήσει
                fetch.setWorker(this::publish);
                
                if (choise.equals("multiple")) {
                    // Καλείται η μέθοδος που αντλεί τα δεδομένα
                    fetch.getRangeDraws(dateRange);
                } else {
                    // Καλείται η μέθοδος που αντλεί τα δεδομένα
                    fetch.getSingleDraw(drawIdField.getText());
                }
                
                return 0;
            }

            @Override
            protected void process(List<Integer> chunks) {
                for (Integer value : chunks) {
                    progressBar.setValue(value);
                }
            }
            
            // Μόλις τελειώσει το thread εμφανίζει τα δεδομένα
            @Override
            protected void done() {
                setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                progressBar.setVisible(false);
                searchBtn.setEnabled(true);
                
                // Εμφανίζει τα δεδομένα
                try {
                    if(!fetch.getDrawsData().isEmpty()) {
                        loadTableWithData(fetch.getDrawsData());
                    }
                    progressBar.setValue(100);
                } catch (Exception e) {
                    hideTable();
                }
            }
        };
        
        // Αν η επιλογή είναι multiple διαβάζει εύρος ημερομηνιών
        if (choise.equals("multiple")) {
            // Παίρνει το εύρος ημερομηνιών σε αντικείμενο DateRange
            DateParser parser = new DateParser(dateFromField.getText(), dateToField.getText());
            dateRange = parser.get();
            
            // Αν δεν υπάρξει σφάλμα καθαρίζει το table
            if(dateRange == null) {
                hideTable();
                fetch.clearDraws();
                return;
            }
        } 
        
        // Διάφορες αρχικοποιήσεις αντικειμένων
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        progressBar.setVisible(true);
        progressBar.setStringPainted(true);
        progressBar.setValue(0);
        drawsTablePanel.setVisible(false);
        buttonsPanel.setVisible(false);
        searchBtn.setEnabled(false);
          
        // Εκτελείται ο Swing Worker
        worker.execute();
    }
    
    // Κρύβει αντικείμενα
    private void hideTable() {
        progressBar.setVisible(false);
        drawsTablePanel.setVisible(false);
        buttonsPanel.setVisible(false);
    }
    
    // Κάνει την αποθήκευση των δεδομένων
    private void saveData() {
        // Δημιουργεί Swing Worker για να τρέξει την αποθήκευση των δεδομένων σε thread
        worker = new SwingWorker<Integer, Integer>() {
            @Override
            protected Integer doInBackground() throws Exception {
                SaveData save = new SaveData(fetch.getDrawsData(), dateRange);
                
                save.setWorker(this::publish);
                int counter = save.saveDraws();
                
                return counter;
            }
            
            @Override
            protected void process(List<Integer> chunks) {
                for (Integer value : chunks) {
                    progressBar.setValue(value);
                }
            }

            @Override
            protected void done() {
                setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                progressBar.setVisible(false);
                progressBar.setStringPainted(false);
                
                try {
                    if (get() != 0)
                    {
                        JOptionPane.showMessageDialog(null, "Έγιναν " + get() + " νέες εγγραφές", "Εγγραφή", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(null, "Δεν γράφτηκε καμιά νέα εγγραφή", "Εγγραφή", JOptionPane.INFORMATION_MESSAGE);
                    }
                } catch (InterruptedException | ExecutionException ex) {
                    Logger.getLogger(DataManagement.class.getName()).log(Level.SEVERE, null, ex);
                }
                
            }
        };
        
        // Διάφορες αρχικοποιήσεις αντικειμένων
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        progressBar.setVisible(true);
        progressBar.setStringPainted(true);
        progressBar.setValue(0);

        worker.execute();
    }
    
    // Κάνει την αποθήκευση των δεδομένων
    private void deleteData() {
        // Δημιουργεί Swing Worker για να τρέξει την διαγραφή των δεδομένων σε thread
        worker = new SwingWorker<Integer, Integer>() {
            @Override
            protected Integer doInBackground() throws Exception {
                DeleteData delete = new DeleteData(fetch.getDrawsData());

                delete.setWorker(this::publish);
                int counter = delete.deleteDraws();

                return counter;
            }

            @Override
            protected void process(List<Integer> chunks) {
                for (Integer value : chunks) {
                    progressBar.setValue(value);
                }
            }

            @Override
            protected void done() {
                setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                progressBar.setVisible(false);
                progressBar.setStringPainted(false);

                try {
                    if (get() != 0) {
                        JOptionPane.showMessageDialog(null, "Έγιναν " + get() + " διαγγραφές", "Διαγραφή", JOptionPane.INFORMATION_MESSAGE);
                    } else {
                        JOptionPane.showMessageDialog(null, "Δεν βρέθηκαν εγγραφές για διαγραφή", "Διαγραφή", JOptionPane.INFORMATION_MESSAGE);
                    }
                } catch (InterruptedException | ExecutionException ex) {
                    Logger.getLogger(DataManagement.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        };

        // Διάφορες αρχικοποιήσεις αντικειμένων
        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        progressBar.setVisible(true);
        progressBar.setStringPainted(true);
        progressBar.setValue(0);
        
        worker.execute();
    }
    
    // Γεμίσει το combobox με τα 10 τελευταία drawId
    private void produceComboBoxValues() {
        
        // Δημιουργεί Swing Worker για να τρέξει την άντληση των δεδομένων σε thread
        worker = new SwingWorker<Integer, Integer>() {
            @Override
            protected Integer doInBackground() throws Exception {
                drawIdCombo.addItem("");
                fetch.getLastDrawIds(10);

                return 0;
            }
            
            @Override
            protected void done() {
                lastDrawId = fetch.getLastId();
                
                for (String drawId : fetch.getDrawIds()) {
                    drawIdCombo.addItem(drawId);
                    drawIdCombo.setEnabled(true);
                }
            }
        };
        
        worker.execute();
    }
    
    // Εκτέλεση της άντλησης δεδομένων μετά από click στο κουμπί
    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        String choise = choiseGroup.getSelection().getActionCommand();
        
        if (choise.equals("single")) {
            int drawId = (Integer.parseInt(drawIdField.getText()));
            if (drawId < 1 || drawId > lastDrawId) {
                JOptionPane.showMessageDialog(null, "Ο κωδικός κλήρωσης δεν είναι σωστός", "Σφάλμα", JOptionPane.INFORMATION_MESSAGE);
                
                return;
            }
        }
        
        // Καλεί την μέθοδο που κάνει fetch τα data, αναλόγως αν η ActionCommand είναι
        // single ή multiple
        fetchDrawsData(choiseGroup.getSelection().getActionCommand());
    }//GEN-LAST:event_searchBtnActionPerformed

    // Αντιγράφει το περιεχόμενο της επιλογής στο drawIdField
    private void drawIdComboItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_drawIdComboItemStateChanged
        if (evt.getStateChange() == evt.SELECTED) {
            // Αντιγράφει το επιλεγμένο drawId στο drawId text field
            if(evt.getItem() != "") {
                drawIdField.setText(evt.getItem().toString());
            }
        }
    }//GEN-LAST:event_drawIdComboItemStateChanged

    // Όταν πατηθεί κάνει αποθήκευση στην βάση
    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
        if(!DB.checkDB()) {
            JOptionPane.showMessageDialog(null, "Δεν μπορεί να γίνει η σύνδεση με την βάση δεδομένων", "Σφάλμα", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        int choise = JOptionPane.showConfirmDialog(this, "Θέλεις να γίνει η αποθήκευση;", "Αποθήκευση",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE);
        if (choise == JOptionPane.YES_OPTION) {
            saveData();
        } else {
            return;
        }
    }//GEN-LAST:event_saveBtnActionPerformed

    // Όταν πατηθεί κάνει διαγραφή δεδομένων από την βάση
    private void deleteDrawsBtnMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteDrawsBtnMouseClicked
        if (!DB.checkDB()) {
            JOptionPane.showMessageDialog(null, "Δεν μπορεί να γίνει η σύνδεση με την βάση δεδομένων", "Σφάλμα", JOptionPane.INFORMATION_MESSAGE);
            return;
        }
        
        int choise = JOptionPane.showConfirmDialog(this, "Θέλεις να γίνει η διαγραφή;", "Διαγραφή",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE);
        if (choise == JOptionPane.YES_OPTION) {
            deleteData();
        } else {
            return;
        }
    }//GEN-LAST:event_deleteDrawsBtnMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel buttonsPanel;
    private javax.swing.ButtonGroup choiseGroup;
    private javax.swing.JFormattedTextField dateFromField;
    private javax.swing.JFormattedTextField dateToField;
    private javax.swing.JButton deleteDrawsBtn;
    private javax.swing.JComboBox<String> drawIdCombo;
    private javax.swing.JTextField drawIdField;
    private javax.swing.JTable drawsTable;
    private javax.swing.JScrollPane drawsTablePanel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JButton saveBtn;
    private javax.swing.JButton searchBtn;
    // End of variables declaration//GEN-END:variables
}
